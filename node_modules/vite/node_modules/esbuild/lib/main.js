// src/main.js (ou le chemin de votre fichier main.js original)

// --- IMPORTS DES LIBRAIRIES ---
import { initializeApp } from 'firebase/app';
// Si vous utilisez d'autres services Firebase (Firestore, Auth, etc.), importez-les ici :
// import { getFirestore } from 'firebase/firestore';
// import { getAuth } from 'firebase/auth';

// --- CONFIGURATION FIREBASE ---
// Accès aux variables d'environnement via import.meta.env (spécifique à Vite)
const firebaseConfig = {
    apiKey: import.meta.env.VITE_API_KEY,
    authDomain: import.meta.env.VITE_AUTH_DOMAIN,
    projectId: import.meta.env.VITE_PROJECT_ID,
    storageBucket: import.meta.env.VITE_STORAGE_BUCKET,
    messagingSenderId: import.meta.env.VITE_MESSAGING_SENDER_ID,
    appId: import.meta.env.VITE_APP_ID,
};

// Initialisation de l'application Firebase
const app = initializeApp(firebaseConfig);
console.log('Firebase App initialisée avec succès !');

// Si vous avez besoin d'autres services, initialisez-les ici :
// const db = getFirestore(app);
// const auth = getAuth(app);

// --- LOGIQUE DE L'APPLICATION QUIZ ---

// Attendre que le DOM soit entièrement chargé avant de manipuler les éléments
document.addEventListener('DOMContentLoaded', () => {
    const appDiv = document.getElementById('app');

    // Injecter la structure HTML de base du quiz dans la div 'app'
    appDiv.innerHTML = `
        <style>
            body {
                font-family: Arial, sans-serif;
                margin: 20px;
                background-color: #f4f4f4;
                color: #333;
            }
            #app {
                max-width: 800px;
                margin: 0 auto;
                background-color: #fff;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            }
            h1, h2, h3 {
                color: #0056b3;
            }
            label {
                display: block;
                margin-bottom: 5px;
                font-weight: bold;
            }
            input[type="text"] {
                width: calc(100% - 22px);
                padding: 10px;
                margin-bottom: 15px;
                border: 1px solid #ddd;
                border-radius: 4px;
            }
            button {
                background-color: #007bff;
                color: white;
                padding: 10px 15px;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                font-size: 16px;
            }
            button:hover {
                background-color: #0056b3;
            }
            .question-block {
                background-color: #e9ecef;
                padding: 15px;
                margin-top: 20px;
                border-radius: 6px;
            }
            .options {
                list-style: none;
                padding: 0;
            }
            .options li {
                margin-bottom: 8px;
            }
            .option-button {
                width: 100%;
                text-align: left;
                background-color: #6c757d;
                color: white;
                padding: 10px;
            }
            .option-button:hover:not(:disabled) {
                background-color: #5a6268;
            }
            .option-button:disabled {
                opacity: 0.7;
                cursor: not-allowed;
            }
            .feedback {
                margin-top: 10px;
                font-weight: bold;
            }
            #loadingMessage, #errorMessage {
                margin-top: 20px;
                padding: 10px;
                border-radius: 4px;
            }
            #loadingMessage {
                background-color: #ffeeba;
                color: #856404;
            }
            #errorMessage {
                background-color: #f8d7da;
                color: #721c24;
            }
        </style>

        <h1>Quiz sur "Viens et Suis-moi 2025 - Doctrine et Alliances"</h1>
        <p>Générez des questions de quiz en spécifiant un chapitre et un thème.</p>

        <label for="chapterInput">Chapitre (ex: D&A 1):</label>
        <input type="text" id="chapterInput" value="Doctrine et Alliances 1">

        <label for="themeInput">Thème (ex: La révélation moderne):</label>
        <input type="text" id="themeInput" value="La révélation moderne">

        <button id="generateQuizButton">Générer un Quiz</button>

        <div id="loadingMessage" style="display: none;">Chargement des questions...</div>
        <div id="errorMessage" style="color: red; display: none;"></div>

        <div id="quizContainer">
            <!-- Les questions du quiz apparaîtront ici -->
        </div>
    `;

    // Récupérer les références aux éléments DOM
    const generateButton = document.getElementById('generateQuizButton');
    const chapterInput = document.getElementById('chapterInput');
    const themeInput = document.getElementById('themeInput');
    const quizContainer = document.getElementById('quizContainer');
    const loadingMessage = document.getElementById('loadingMessage');
    const errorMessage = document.getElementById('errorMessage');

    // Ajouter un écouteur d'événements au bouton de génération de quiz
    generateButton.addEventListener('click', async () => {
        const chapter = chapterInput.value.trim();
        const theme = themeInput.value.trim();

        if (!chapter || !theme) {
            displayError('Veuillez entrer un chapitre et un thème pour générer le quiz.');
            return;
        }

        // Réinitialiser l'affichage avant chaque nouvelle génération
        quizContainer.innerHTML = '';
        displayLoading(true);
        hideError();

        try {
            // Appel à la fonction Netlify pour générer le quiz
            const quizData = await generateQuizFromGemini(chapter, theme);

            if (quizData && quizData.length > 0) {
                displayQuiz(quizData, quizContainer);
            } else {
                displayError('Aucune question générée. Essayez d\'être plus spécifique ou vérifiez le format de réponse de l\'API.');
            }
        } catch (error) {
            console.error('Erreur lors de la génération du quiz:', error);
            displayError(`Erreur: ${error.message}. Impossible de générer le quiz. Veuillez réessayer.`);
        } finally {
            displayLoading(false);
        }
    });

    /**
     * Appelle la fonction Netlify pour générer un quiz via l'API Gemini.
     * @param {string} chapter Le chapitre du programme "Viens et Suis-moi".
     * @param {string} theme Le thème spécifique à aborder.
     * @returns {Promise<Array<Object>>} Un tableau d'objets quiz.
     */
    async function generateQuizFromGemini(chapter, theme) {
        // C'est ici que l'appel à votre Netlify Function aura lieu
        // L'URL doit correspondre à votre configuration de fonction Netlify (par défaut .netlify/functions/nom-de-la-fonction)
        const response = await fetch('/.netlify/functions/generate-quiz', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ chapter, theme }), // Envoyer les paramètres nécessaires à votre fonction
        });

        if (!response.ok) {
            // Tenter de lire l'erreur du corps de la réponse si disponible
            const errorDetails = await response.json().catch(() => ({ error: 'Détails de l\'erreur non disponibles' }));
            throw new Error(`Échec de la récupération du quiz: ${response.status} - ${errorDetails.error || JSON.stringify(errorDetails)}`);
        }

        // Retourner les données JSON du quiz
        return response.json();
    }

    /**
     * Affiche les questions du quiz dans le conteneur spécifié.
     * @param {Array<Object>} quizData Le tableau de questions du quiz.
     * @param {HTMLElement} container L'élément HTML où afficher le quiz.
     */
    function displayQuiz(quizData, container) {
        quizData.forEach((q, index) => {
            const questionDiv = document.createElement('div');
            questionDiv.className = 'question-block';
            questionDiv.innerHTML = `
                <h3>Question ${index + 1}: ${q.question}</h3>
                <ul class="options">
                    ${q.options.map(option => `<li><button class="option-button">${option}</button></li>`).join('')}
                </ul>
                <div class="feedback" style="display: none;"></div>
            `;
            container.appendChild(questionDiv);

            // Ajouter les écouteurs d'événements pour les boutons d'options
            questionDiv.querySelectorAll('.option-button').forEach(button => {
                button.addEventListener('click', (event) => {
                    const selectedOption = event.target.textContent;
                    const feedbackDiv = questionDiv.querySelector('.feedback');
                    feedbackDiv.style.display = 'block';

                    if (selectedOption === q.correctAnswer) {
                        feedbackDiv.textContent = 'Correct !';
                        feedbackDiv.style.color = 'green';
                    } else {
                        feedbackDiv.textContent = `Faux. La bonne réponse était : "${q.correctAnswer}"`;
                        feedbackDiv.style.color = 'red';
                    }
                    // Désactiver tous les boutons d'option pour cette question après une sélection
                    questionDiv.querySelectorAll('.option-button').forEach(btn => btn.disabled = true);
                });
            });
        });
    }

    /**
     * Gère l'affichage du message de chargement.
     * @param {boolean} isLoading True pour afficher, false pour cacher.
     */
    function displayLoading(isLoading) {
        loadingMessage.style.display = isLoading ? 'block' : 'none';
    }

    /**
     * Gère l'affichage du message d'erreur.
     * @param {string} message Le message d'erreur à afficher.
     */
    function displayError(message) {
        errorMessage.textContent = message;
        errorMessage.style.display = 'block';
    }

    /**
     * Cache le message d'erreur.
     */
    function hideError() {
        errorMessage.style.display = 'none';
    }
});